{"version":3,"sources":["Components/Formulario.js","Components/ListadoCitas.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","mostrar","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","ListadoCitas","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.419bb479.chunk.js","sourcesContent":["import React, { Fragment, useState} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst Formulario = ({crearCita}) => {\n\n    const [cita, actualizarCita] = useState({\n        mascota: '',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas: '',\n        mostrar: false\n    });\n\n    const [ error, actualizarError] = useState(false);\n\n    const actualizarState = e => {\n        actualizarCita({\n            ...cita,\n            [e.target.name] : e.target.value\n        });            \n    }\n\n    //extraemos los valores del objeto\n    const { mascota, propietario, fecha, hora, sintomas } = cita;\n\n    //cuando el usuario preciona click al botn de guardar cita\n    const guardarCita = e => {\n        e.preventDefault();\n\n        //validar form\n        if( mascota.trim() == '' || propietario.trim() == '' || fecha.trim() == '' || hora.trim() == '' || sintomas.trim() == '' ){\n            actualizarError(true);\n            return;\n        }\n\n        //eliminamos mensaje de errores\n        actualizarError(false);\n\n        //asignar idd\n        cita.id = uuidv4();\n\n        //guardando cita\n        crearCita(cita);\n\n        // limpiando los campos\n        actualizarCita({\n            mascota: '',\n            propietario: '',\n            fecha: '',\n            hora: '',\n            sintomas: '',\n            mostrar: false\n        });\n        \n    }\n    \n    return ( \n        <Fragment>\n            <h1>Crear Cita</h1>\n\n            { error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null}\n\n            <form\n                onSubmit={guardarCita}\n            >\n                <label>Nombre de la Mascota</label>\n                <input \n                    type=\"text\"\n                    name=\"mascota\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre Mascota\"\n                    onChange={actualizarState}\n                    value={mascota}\n                />\n                <label>Nombre del Dueño</label>\n                <input \n                    type=\"text\"\n                    name=\"propietario\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre Dueño Mascota\"\n                    onChange={actualizarState}\n                    value={propietario}\n                />\n                <label>Fecha Consulta</label>\n                <input \n                    type=\"date\"\n                    name=\"fecha\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={fecha}\n                />\n                <label>Hora Consulta</label>\n                <input \n                    type=\"time\"\n                    name=\"hora\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={hora}\n                />\n                <label>Sintomas Consulta</label>\n                <textarea\n                    name=\"sintomas\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={sintomas}\n                ></textarea>\n\n                <button\n                    type=\"submit\"\n                    className=\"u-full-width button-primary\"\n                >Agregar Cita</button>\n            </form>\n        </Fragment>\n     );\n}\n \nexport default Formulario;","import React, {Fragment} from 'react';\n\nconst ListadoCitas = ({cita, eliminarCita}) => {\n\n    return ( \n        <Fragment>\n            <div className=\"cita\">\n                <p>Mascota: <span>{cita.mascota}</span></p>\n                <p>Propietario: <span>{cita.propietario}</span></p>\n                <p>Fecha: <span>{cita.fecha}</span></p>\n                <p>Hora: <span>{cita.hora}</span></p>\n                <p>Sintomas: <span>{cita.sintomas}</span></p>\n                <button\n                    className=\"button eliminar u-full-width\"\n                    onClick={ () => eliminarCita(cita.id)}\n                >Eliminar</button>\n            </div>\n        </Fragment>\n     );\n}\n \nexport default ListadoCitas;","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './Components/Formulario';\nimport ListadoCitas from './Components/ListadoCitas';\n\nfunction App() {\n\n  // citas en localStorage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales){\n    citasIniciales = [];\n  }\n\n  // arreglo de cistas\n  const [ citas, guardarCitas ] = useState(citasIniciales);\n\n  // use el HOOK useEffect para cuando el state cambia\n  useEffect( () => {\n    if(citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas))\n    }else {\n      localStorage.setItem('citas', JSON.stringify([]))\n    }\n  }, [citas])\n\n  //leer nueva cita mas la cita que llega\n  const crearCita = cita => {\n    guardarCitas([\n      ...citas,\n      cita\n    ]);\n  }\n\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter( cita => cita.id !== id);\n    guardarCitas(nuevasCitas);\n  };\n\n  let titulo =  citas.length > 0 ? \"ADMINISTRACION DE PACIENTES\" : 'NO TIENE CITAS ASIGNADAS';\n\n\n  return (\n    <Fragment>\n      \n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n              crearCita= {crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n              <h2>{titulo}</h2>\n              { citas.map(cita => (\n                  <ListadoCitas \n                    key={cita.id}\n                    cita={cita}\n                    eliminarCita={eliminarCita}\n                  />\n              ))}\n          </div>     \n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}